import java.awt.Desktop;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.table.DefaultTableModel;
import java.io.File;
import java.io.FileNotFoundException;
import java.net.URI;
import java.util.Scanner;
import javax.swing.filechooser.FileNameExtensionFilter;

public class SimpleSchedulerGUI extends javax.swing.JFrame {

    int MAX_TIME = 100;
    int QUANTUM = 2;
    int SPEED = 50;
    static DefaultTableModel tableModel;
    Process[] processes;
    ExecutorService SchedulerThread = Executors.newSingleThreadExecutor();

    public SimpleSchedulerGUI() {
        initComponents();
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                SchedulerThread.shutdownNow();
                System.exit(-1);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        LoadFileButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ProcessListTextArea = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        RunSchedulerButton = new javax.swing.JButton();
        CurrentProcessTextField = new javax.swing.JTextField();
        CurrentProcessLabel = new javax.swing.JLabel();
        ReadyQueueLabel = new javax.swing.JLabel();
        ReadyQueueTextField = new javax.swing.JTextField();
        SpeedSlider = new javax.swing.JSlider();
        SpeedLabel = new javax.swing.JLabel();
        ScrollPane = new javax.swing.JScrollPane();
        GanttChartTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        GUIConsole = new javax.swing.JTextArea();
        SpinnerModel smodel = new SpinnerNumberModel(2, 0, 10, 1);
        QuantumSpinner = new javax.swing.JSpinner(smodel);
        QuantumLabel = new javax.swing.JLabel();
        GanttChartLabel = new javax.swing.JLabel();
        MaxTimeTextField = new javax.swing.JTextField();
        MaxTimeLabel = new javax.swing.JLabel();
        RickButton = new javax.swing.JButton();

        FileNameExtensionFilter txtFilter = new FileNameExtensionFilter("TEXT FILES", "txt", "text");
        jFileChooser1.setFileFilter(txtFilter);
        jFileChooser1.setCurrentDirectory(new java.io.File("C:\\"));

            setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
            setSize(new java.awt.Dimension(0, 10));

            LoadFileButton.setText("Load File");
            LoadFileButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    LoadFileButtonActionPerformed(evt);
                }
            });

            ProcessListTextArea.setEditable(false);
            ProcessListTextArea.setColumns(20);
            ProcessListTextArea.setRows(5);
            jScrollPane1.setViewportView(ProcessListTextArea);

            jLabel5.setText("ID, Arrival, Priority, CPU Burst");

            javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
            jPanel1.setLayout(jPanel1Layout);
            jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addComponent(jScrollPane1)
                    .addContainerGap())
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(33, 33, 33)
                    .addComponent(jLabel5)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );
            jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 442, javax.swing.GroupLayout.PREFERRED_SIZE))
            );

            RunSchedulerButton.setText("Run Scheduler");
            RunSchedulerButton.setEnabled(false);
            RunSchedulerButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    RunSchedulerButtonActionPerformed(evt);
                }
            });

            CurrentProcessTextField.setEditable(false);
            CurrentProcessTextField.setText("None");

            CurrentProcessLabel.setText("Current Process: ");

            ReadyQueueLabel.setText("Ready Queue: ");

            ReadyQueueTextField.setEditable(false);
            ReadyQueueTextField.setText("None");

            SpeedSlider.setMinimum(1);
            SpeedSlider.addChangeListener(new javax.swing.event.ChangeListener() {
                public void stateChanged(javax.swing.event.ChangeEvent evt) {
                    SpeedSliderStateChanged(evt);
                }
            });

            SpeedLabel.setText("Speed");

            ScrollPane.setAutoscrolls(true);

            tableModel = new DefaultTableModel(new Object[] {}, 1);
            GanttChartTable.setModel(tableModel);
            GanttChartTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            ScrollPane.setViewportView(GanttChartTable);

            jScrollPane2.setAutoscrolls(true);

            GUIConsole.setColumns(20);
            GUIConsole.setRows(5);
            jScrollPane2.setViewportView(GUIConsole);

            QuantumSpinner.setValue(2);
            QuantumSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
                public void stateChanged(javax.swing.event.ChangeEvent evt) {
                    QuantumSpinnerStateChanged(evt);
                }
            });

            QuantumLabel.setText("Quantum:");

            GanttChartLabel.setText("Gantt Chart:");

            MaxTimeTextField.setText("100");
            MaxTimeTextField.addFocusListener(new java.awt.event.FocusAdapter() {
                public void focusLost(java.awt.event.FocusEvent evt) {
                    MaxTimeTextFieldFocusLost(evt);
                }
            });

            MaxTimeLabel.setText("Max Time Units To Run For:");

            RickButton.setText("Rick");
            RickButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    RickButtonActionPerformed(evt);
                }
            });

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(596, 596, 596)
                    .addComponent(GanttChartLabel)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 960, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(ScrollPane)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(LoadFileButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(RunSchedulerButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addComponent(RickButton, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addGap(76, 76, 76)
                                                .addComponent(MaxTimeLabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(MaxTimeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addGap(51, 51, 51)
                                                .addComponent(SpeedSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addGap(133, 133, 133)
                                            .addComponent(SpeedLabel)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                    .addComponent(QuantumSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(122, 122, 122))
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                    .addComponent(QuantumLabel)
                                                    .addGap(112, 112, 112)))
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(CurrentProcessLabel)
                                                .addComponent(ReadyQueueLabel))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(ReadyQueueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(CurrentProcessTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGap(35, 35, 35)))))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(LoadFileButton)
                                .addComponent(CurrentProcessTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(CurrentProcessLabel)
                                .addComponent(SpeedLabel))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(RunSchedulerButton)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(ReadyQueueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ReadyQueueLabel)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(RickButton))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(QuantumLabel)
                            .addGap(1, 1, 1)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(QuantumSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(SpeedSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(MaxTimeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(MaxTimeLabel))))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(3, 3, 3)
                    .addComponent(GanttChartLabel)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(ScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );

            pack();
        }// </editor-fold>//GEN-END:initComponents

    private void LoadFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadFileButtonActionPerformed
        int returnVal = jFileChooser1.showOpenDialog(this);
        if (returnVal == jFileChooser1.APPROVE_OPTION) {
            File f = jFileChooser1.getSelectedFile();
            String fileName = f.getAbsolutePath();
            processes = makeProcesses(loadFile(fileName));
            RunSchedulerButton.setEnabled(true);
        }
        else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_LoadFileButtonActionPerformed

    private void SpeedSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_SpeedSliderStateChanged
       SPEED = SpeedSlider.getValue();
    }//GEN-LAST:event_SpeedSliderStateChanged

    private void RunSchedulerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RunSchedulerButtonActionPerformed
        Runnable scheduler = new Runnable() {
            public void run() {
                MaxTimeTextField.setEnabled(false);
                runScheduler();
            }//end run
        };//end addColumn
        SchedulerThread.execute(scheduler);
        RunSchedulerButton.setEnabled(false);
    }//GEN-LAST:event_RunSchedulerButtonActionPerformed

    private void QuantumSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_QuantumSpinnerStateChanged
        QUANTUM = (Integer)QuantumSpinner.getValue();
    }//GEN-LAST:event_QuantumSpinnerStateChanged

    private void MaxTimeTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_MaxTimeTextFieldFocusLost
        MAX_TIME = Integer.parseInt(MaxTimeTextField.getText());
    }//GEN-LAST:event_MaxTimeTextFieldFocusLost

    private void RickButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RickButtonActionPerformed
        Desktop d = Desktop.getDesktop();
        try {
            d.browse(new URI("https://youtu.be/lXMskKTw3Bc?t=3"));
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_RickButtonActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SimpleSchedulerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SimpleSchedulerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SimpleSchedulerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SimpleSchedulerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SimpleSchedulerGUI().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CurrentProcessLabel;
    private javax.swing.JTextField CurrentProcessTextField;
    private javax.swing.JTextArea GUIConsole;
    private javax.swing.JLabel GanttChartLabel;
    private javax.swing.JTable GanttChartTable;
    private javax.swing.JButton LoadFileButton;
    private javax.swing.JLabel MaxTimeLabel;
    private javax.swing.JTextField MaxTimeTextField;
    private javax.swing.JTextArea ProcessListTextArea;
    private javax.swing.JLabel QuantumLabel;
    private javax.swing.JSpinner QuantumSpinner;
    private javax.swing.JLabel ReadyQueueLabel;
    private javax.swing.JTextField ReadyQueueTextField;
    private javax.swing.JButton RickButton;
    private javax.swing.JButton RunSchedulerButton;
    private javax.swing.JScrollPane ScrollPane;
    private javax.swing.JLabel SpeedLabel;
    private javax.swing.JSlider SpeedSlider;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables

/*
Most of the above code was generated by NetBean's GUI builder, except the action lister type stuff
-----------------------------------------------------------------------------------------------------------------
Below code is entirely my own
*/

    //adds a new column to the gantt chart table
    public void addToGanttChart(int time, String id) {
        tableModel.addColumn(time);
        tableModel.setValueAt(id, 0, time);
        ScrollPane.getHorizontalScrollBar().setValue(ScrollPane.getHorizontalScrollBar().getMaximum());
    }//end addToGanttChart

    //Writes the process list out on the GUI
    public void writeProcessList(Process[] p) {
        String tempStr = "";
        for(Process x: p) {
            tempStr = x.getID() + ", " + x.getArrivalTime() + ", " + x.getPriority() + ", " + x.getTimeLeft() + '\n';
            ProcessListTextArea.append(tempStr);
        }//end for
    }//end writeProcessList

    //writes out the ready queue on the GUI
    public void writeReadyQueue(Process[] rq, int cpc) {
        String tempStr = "";
        for(int i = 0; i < cpc - 1; i++) {
            tempStr += rq[i].getID();
            if (i != rq.length - 1)
                tempStr += ", ";
        }//end for
        ReadyQueueTextField.setText(tempStr);
    }//end writeReadyQueue

    //writes the current running process on the GUI
    //I know this is an unnecessary method, but I want to keep the GUI stuff seperate from the main stuff except for method calls
    public void writeRunningProcess(int x) {
        CurrentProcessTextField.setText(Integer.toString(x));
    }//end writeRunningProcess

    //writes a line to the console of the GUI
    //again, a relatively unnecessary method, for the sake of keeping GUI operations seperat from Scheduler ones
    public void writeToGUIConsole(String s) {
        GUIConsole.append(s + '\n');
        jScrollPane2.getHorizontalScrollBar().setValue(jScrollPane2.getHorizontalScrollBar().getMaximum());
    }//end writeToGUIConsole

 /*
 Above this point is GUI code
 ----------------------------------------------------------------------------------------------------------------------------------------------
 Below this is code for the actual Scheduler
 */

    //this is where the magic happens
    //the bulk of the actual scheduler is here
    public void runScheduler() {
        Process[] readyQueue = new Process[processes.length];
        int[] finishTime = new int[processes.length];

        int[] arrivalQueue = new int[processes.length];
        for (int i = 0; i < processes.length; i++) {
            arrivalQueue[i] = processes[i].getArrivalTime();
        }//end for

        int arrivalCounter = 0;
        int currentProcessCount = 0;
        int currentRunningProcess = -1;//-1 means no process running
        int quantumCounter = 0;
        int tempProcess = -1;
        String tempStr = "";

        //main loop
        for (int timeUnit = 0; timeUnit < MAX_TIME; timeUnit++) {

            try {
                Thread.sleep(2000 - 20 * SPEED);
            }//end try
            catch (InterruptedException e) {
                e.printStackTrace();
            }//end catch

            //check for new arrivals
            if (arrivalCounter < processes.length) {
                if (timeUnit == arrivalQueue[arrivalCounter]) {
                    if (currentRunningProcess != -1) {
                        if (processes[currentRunningProcess].getPriority() <= processes[arrivalCounter].getPriority()) {
                            writeToGUIConsole("New Process " + processes[arrivalCounter].getID() + " Arrival, Time: " + timeUnit);
                            addProcessToQueue(processes[arrivalCounter], readyQueue, currentProcessCount);
                            writeReadyQueue(readyQueue, currentProcessCount);
                        }//end if
                        else {
                            writeToGUIConsole("Preemption: " + processes[currentRunningProcess].getID() + " preempted " + processes[arrivalCounter].getID() + ", Time: " + timeUnit);
                            addProcessToQueue(processes[currentRunningProcess], readyQueue, currentProcessCount);
                            currentRunningProcess = arrivalCounter;
                            writeRunningProcess(currentRunningProcess);
                            writeReadyQueue(readyQueue, currentProcessCount);
                        }
                    }//end if
                    else {
                        currentRunningProcess = arrivalCounter;
                        writeRunningProcess(currentRunningProcess);
                        writeToGUIConsole("New Process " + processes[currentRunningProcess].getID() + " added, ready queue empty, Time: " + timeUnit);
                    }//end else
                    arrivalCounter++;
                    currentProcessCount++;
                }//end if
            }//end if

            //check quantum
            if (currentRunningProcess != -1 && currentProcessCount > 1) {
                if (processes[currentRunningProcess].getPriority() == readyQueue[0].getPriority()) {
                    quantumCounter++;
                    if (quantumCounter > QUANTUM) {
                        tempProcess = getNextProcess(readyQueue, currentProcessCount);
                        addProcessToQueue(processes[currentRunningProcess], readyQueue, currentProcessCount);
                        currentRunningProcess = tempProcess;
                        writeRunningProcess(currentRunningProcess);
                        writeToGUIConsole("Round Robin Switch, Time: " + timeUnit);
                        writeReadyQueue(readyQueue, currentProcessCount);
                    }//end if
                }//end if
            }//end if

            //run current process
            tempStr = "Time: " + timeUnit + ", Current Process: ";
            if (currentRunningProcess != -1) {
                tempStr += processes[currentRunningProcess].getID();
                writeToGUIConsole(tempStr);
                addToGanttChart(timeUnit, processes[currentRunningProcess].getID());
                if (!(processes[currentRunningProcess].runProcess())) {
                    finishTime[currentRunningProcess] = timeUnit + 1;
                    writeToGUIConsole("Process " + processes[currentRunningProcess].getID() + " finished, Time: " + timeUnit);
                    currentRunningProcess = getNextProcess(readyQueue, currentProcessCount);
                    currentProcessCount--;
                    if (currentRunningProcess != -1)
                        writeToGUIConsole("Switching to process " + processes[currentRunningProcess].getID());
                    else
                        writeToGUIConsole("Switching to process " + currentRunningProcess);
                    writeRunningProcess(currentRunningProcess);
                    writeReadyQueue(readyQueue, currentProcessCount);
                    if (quantumCounter != 0)
                        quantumCounter = 0;
                }//end if
            }//end if
            else {
                tempStr += currentRunningProcess;
                writeToGUIConsole(tempStr);
                addToGanttChart(timeUnit, Integer.toString(currentRunningProcess));
            }//end else

        }//end for

        writeToGUIConsole("Turnaround Time: ");
        int turnaroundTemp = 0;
        double averageTemp = 0;
        for (int i = 0; i < processes.length; i++) {
            turnaroundTemp = finishTime[i] - arrivalQueue[i];
            averageTemp += turnaroundTemp;
            writeToGUIConsole("Process: " + processes[i].getID() + ", Turnaround Time: " + turnaroundTemp);
            turnaroundTemp = 0;
        }//end for
        averageTemp = averageTemp / processes.length;
        writeToGUIConsole("Average: " + averageTemp);
        //writeToGUIConsole("Gantt Chart: " + ganttChart.toString());
    }//end runScheduler

    //returns the next process to complete and shifts the ready queue accordingly
    //returns -1 if ready queue empty
    public static int getNextProcess(Process[] rq, int currentProcessCount) {
        int  nextProcess = -1;
        if (currentProcessCount > 1) {
            nextProcess = rq[0].getProcessLocation();
            for (int i = 0; i < currentProcessCount - 1; i++)
                rq[i] = rq[i+1];
        }//end if
        rq[currentProcessCount - 1] = null;

        return nextProcess;
    }//end getNextProcess

    //prints out an array of processes, mostly for testing
    public static void printProcessArray(Process[] pa){
        for(Process x: pa)
            if (x != null)
                x.printProcess();
    }//end printProcessArray

    //takes the ready queue and a new process and adds the process where it needs to be (insertion sort by priority)
    public static void addProcessToQueue(Process p, Process[] rq, int currentProcessCount) {
        int priority = p.getPriority();
        int finalPosition = 0;
        for (int i = 0; i < currentProcessCount + 1; i++) {
            if (rq[i] != null) {
                if (priority < rq[i].getPriority()) {
                    finalPosition = i;
                    break;
                }//end if
            }//end if
            else {
                finalPosition = i;
                break;
            }//end else
        }//end for
        if (currentProcessCount > finalPosition)
            shiftArrayRightFromPoint(rq, finalPosition, currentProcessCount);
        rq[finalPosition] = p;
    }//end addProcessToQueue

    //shifts an array right from a given starting point
    //this should never be called when currentProcessCount = ready queue max, so don't need to check for that
    public static void shiftArrayRightFromPoint(Process[] rq, int start, int currentProcessCount) {
        for (int i = currentProcessCount; i > start; i--) {
            rq[i] = rq[i-1];
        }//end for
        rq[start] = null;   //not necessary, but just for security
    }//end shiftArrayRightFromPoint

    //returns the contents of a specified file as an array of lines
    public static String[] loadFile(String fileName) {
        String fileContents = "";
        String[] lines;
        int lineCounter = 0;
        try {
            File file = new File(fileName);
            Scanner fileScanner = new Scanner(file);
            while (fileScanner.hasNextLine()) {
                lineCounter++;
                fileContents += fileScanner.nextLine() + "\n";
            }//end while
            fileScanner.close();
        }//end try
        catch(FileNotFoundException e) {
            e.printStackTrace();
        }//end catch

        lines = new String[lineCounter];
        int counter = 0;
        String tempString;
        for (int i = 0; i < lineCounter; i++) {
            tempString = "";
            while (fileContents.charAt(counter) != '\n') {
                tempString += fileContents.charAt(counter);
                counter++;
            }//end while
            counter++;
            lines[i] = tempString;
        }//end for

        return lines;
    }//end loadFile

    //interperets the file, makes the processes
    public Process[] makeProcesses(String[] lines) {
        int totalProcesses = Integer.parseInt(lines[0]);
        Process[] processes = new Process[totalProcesses];
        int[] tempProcessAttributes = new int[3];
        String tempString = "";
        int attributeCounter;
        for (int i = 1; i < lines.length; i++) {
            attributeCounter = 0;
            for(int j = 0; j < lines[i].length(); j++) {
                if (lines[i].charAt(j) != ' ')
                    tempString += lines[i].charAt(j);
                else {
                    tempProcessAttributes[attributeCounter] = Integer.parseInt(tempString);
                    attributeCounter++;
                    tempString = "";
                }//end else
            }//end for
            tempProcessAttributes[attributeCounter] = Integer.parseInt(tempString);
            processes[i-1] = new Process(makeProcessID(i-1), tempProcessAttributes[0], tempProcessAttributes[1], tempProcessAttributes[2], i-1);
            tempString = "";
        }//end for
        writeProcessList(processes);
        return processes;
    }//end makeProcesses

    //takes the process number and returns a two (or one) letter id for it, 702 possible IDS
    //though this should work past 702 processes, ID will just be NULL.
    public static String makeProcessID(int processNum) {
        int counter = 0;
        for(char b = 'A'; b <= 'Z'; b++) {
            if (counter == processNum)
                return Character.toString(b);
            counter++;
        }//end for
        for (char a = 'A'; a <= 'Z'; a++) {
            for(char b = 'A'; b <= 'Z'; b++) {
                if (counter == processNum)
                    return Character.toString(a) + Character.toString(b);
            counter++;
            }//end for
        }//end for
        return null;
    }//end makeProcessID

}//end SimpleSchedulerGUI

/*
--------------------------------------------------------------------------------------------------------------------------------------------------------
Below this is the process class
*/

//these are the processes running on the CPU
class Process {
    private final int processArrivalTime;
    private final String processID;
    private final int processLoc;
    private final int processPriority;
    private int processTimeLeft;

    //constructor
    public Process(String pID, int pArrival, int pPriority, int pTimeLeft, int pLoc) {
        processID = pID;
        processArrivalTime = pArrival;
        processPriority = pPriority;
        processTimeLeft = pTimeLeft;
        processLoc = pLoc;
    }//end constructor

    //returns current time left
    public int getTimeLeft() {
        return processTimeLeft;
    }//end getTimeLeft

    //returns ID
    public String getID() {
        return processID;
    }//end getID

    //returns priority
    public int getPriority() {
        return processPriority;
    }//end getPriority

    //returns arrival time
    public int getArrivalTime() {
        return processArrivalTime;
    }//end getArrivalTime

    //returns process location
    public int getProcessLocation() {
        return processLoc;
    }//end getProcessLocation

    //runs the process for one cpu cycle, decreases time left by one,
    //returns false if finished, true if more left to do
    public boolean runProcess(){
        processTimeLeft--;
        return processTimeLeft != 0;
    }//end runProcess

    public void printProcess() {
        String str = "Process ID: " + processID + "\nProcess Arrival Time: " + processArrivalTime + "\nProcess Priority: " + processPriority + "\nProcess CPU Burst: " + processTimeLeft;
        System.out.println(str);
    }//end printProcess
}//end class Process
